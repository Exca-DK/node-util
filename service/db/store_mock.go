// Code generated by MockGen. DO NOT EDIT.
// Source: ./db/store.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	db "github.com/Exca-DK/node-util/service/db/sqlc"
	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddQueries mocks base method.
func (m *MockStore) AddQueries(ctx context.Context, arg db.AddQueriesParams) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddQueries", ctx, arg)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddQueries indicates an expected call of AddQueries.
func (mr *MockStoreMockRecorder) AddQueries(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddQueries", reflect.TypeOf((*MockStore)(nil).AddQueries), ctx, arg)
}

// CreateEnrRecord mocks base method.
func (m *MockStore) CreateEnrRecord(ctx context.Context, arg db.CreateEnrRecordParams) (db.EnrRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEnrRecord", ctx, arg)
	ret0, _ := ret[0].(db.EnrRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEnrRecord indicates an expected call of CreateEnrRecord.
func (mr *MockStoreMockRecorder) CreateEnrRecord(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEnrRecord", reflect.TypeOf((*MockStore)(nil).CreateEnrRecord), ctx, arg)
}

// CreateNode mocks base method.
func (m *MockStore) CreateNode(ctx context.Context, id string) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", ctx, id)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockStoreMockRecorder) CreateNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockStore)(nil).CreateNode), ctx, id)
}

// CreateRlpRecord mocks base method.
func (m *MockStore) CreateRlpRecord(ctx context.Context, arg db.CreateRlpRecordParams) (db.RlpRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRlpRecord", ctx, arg)
	ret0, _ := ret[0].(db.RlpRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRlpRecord indicates an expected call of CreateRlpRecord.
func (mr *MockStoreMockRecorder) CreateRlpRecord(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRlpRecord", reflect.TypeOf((*MockStore)(nil).CreateRlpRecord), ctx, arg)
}

// CreateScanRecord mocks base method.
func (m *MockStore) CreateScanRecord(ctx context.Context, arg db.CreateScanRecordParams) (db.ScanRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateScanRecord", ctx, arg)
	ret0, _ := ret[0].(db.ScanRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateScanRecord indicates an expected call of CreateScanRecord.
func (mr *MockStoreMockRecorder) CreateScanRecord(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateScanRecord", reflect.TypeOf((*MockStore)(nil).CreateScanRecord), ctx, arg)
}

// DeleteEnrRecord mocks base method.
func (m *MockStore) DeleteEnrRecord(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEnrRecord", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEnrRecord indicates an expected call of DeleteEnrRecord.
func (mr *MockStoreMockRecorder) DeleteEnrRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEnrRecord", reflect.TypeOf((*MockStore)(nil).DeleteEnrRecord), ctx, id)
}

// DeleteNode mocks base method.
func (m *MockStore) DeleteNode(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockStoreMockRecorder) DeleteNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockStore)(nil).DeleteNode), ctx, id)
}

// DeleteNodeScanRecords mocks base method.
func (m *MockStore) DeleteNodeScanRecords(ctx context.Context, node string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNodeScanRecords", ctx, node)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNodeScanRecords indicates an expected call of DeleteNodeScanRecords.
func (mr *MockStoreMockRecorder) DeleteNodeScanRecords(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNodeScanRecords", reflect.TypeOf((*MockStore)(nil).DeleteNodeScanRecords), ctx, node)
}

// DeleteRlpRecord mocks base method.
func (m *MockStore) DeleteRlpRecord(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRlpRecord", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteRlpRecord indicates an expected call of DeleteRlpRecord.
func (mr *MockStoreMockRecorder) DeleteRlpRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRlpRecord", reflect.TypeOf((*MockStore)(nil).DeleteRlpRecord), ctx, id)
}

// DeleteScanRecord mocks base method.
func (m *MockStore) DeleteScanRecord(ctx context.Context, id int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteScanRecord", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteScanRecord indicates an expected call of DeleteScanRecord.
func (mr *MockStoreMockRecorder) DeleteScanRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteScanRecord", reflect.TypeOf((*MockStore)(nil).DeleteScanRecord), ctx, id)
}

// GetEnrRecord mocks base method.
func (m *MockStore) GetEnrRecord(ctx context.Context, id string) (db.EnrRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnrRecord", ctx, id)
	ret0, _ := ret[0].(db.EnrRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEnrRecord indicates an expected call of GetEnrRecord.
func (mr *MockStoreMockRecorder) GetEnrRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnrRecord", reflect.TypeOf((*MockStore)(nil).GetEnrRecord), ctx, id)
}

// GetNode mocks base method.
func (m *MockStore) GetNode(ctx context.Context, id string) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", ctx, id)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockStoreMockRecorder) GetNode(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockStore)(nil).GetNode), ctx, id)
}

// GetNodeScanRecords mocks base method.
func (m *MockStore) GetNodeScanRecords(ctx context.Context, node string) (db.ScanRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeScanRecords", ctx, node)
	ret0, _ := ret[0].(db.ScanRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeScanRecords indicates an expected call of GetNodeScanRecords.
func (mr *MockStoreMockRecorder) GetNodeScanRecords(ctx, node interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeScanRecords", reflect.TypeOf((*MockStore)(nil).GetNodeScanRecords), ctx, node)
}

// GetRlpRecord mocks base method.
func (m *MockStore) GetRlpRecord(ctx context.Context, id string) (db.RlpRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRlpRecord", ctx, id)
	ret0, _ := ret[0].(db.RlpRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRlpRecord indicates an expected call of GetRlpRecord.
func (mr *MockStoreMockRecorder) GetRlpRecord(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRlpRecord", reflect.TypeOf((*MockStore)(nil).GetRlpRecord), ctx, id)
}

// IncrementQuery mocks base method.
func (m *MockStore) IncrementQuery(ctx context.Context, id string) (db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementQuery", ctx, id)
	ret0, _ := ret[0].(db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncrementQuery indicates an expected call of IncrementQuery.
func (mr *MockStoreMockRecorder) IncrementQuery(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementQuery", reflect.TypeOf((*MockStore)(nil).IncrementQuery), ctx, id)
}

// ListNodesByActivity mocks base method.
func (m *MockStore) ListNodesByActivity(ctx context.Context, arg db.ListNodesByActivityParams) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesByActivity", ctx, arg)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesByActivity indicates an expected call of ListNodesByActivity.
func (mr *MockStoreMockRecorder) ListNodesByActivity(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesByActivity", reflect.TypeOf((*MockStore)(nil).ListNodesByActivity), ctx, arg)
}

// ListNodesByCreation mocks base method.
func (m *MockStore) ListNodesByCreation(ctx context.Context, arg db.ListNodesByCreationParams) ([]db.Node, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodesByCreation", ctx, arg)
	ret0, _ := ret[0].([]db.Node)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodesByCreation indicates an expected call of ListNodesByCreation.
func (mr *MockStoreMockRecorder) ListNodesByCreation(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodesByCreation", reflect.TypeOf((*MockStore)(nil).ListNodesByCreation), ctx, arg)
}

// MarkEnrSeen mocks base method.
func (m *MockStore) MarkEnrSeen(ctx context.Context, arg db.MarkEnrSeenParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkEnrSeen", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkEnrSeen indicates an expected call of MarkEnrSeen.
func (mr *MockStoreMockRecorder) MarkEnrSeen(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkEnrSeen", reflect.TypeOf((*MockStore)(nil).MarkEnrSeen), ctx, arg)
}

// UpdateEnrFields mocks base method.
func (m *MockStore) UpdateEnrFields(ctx context.Context, arg db.UpdateEnrFieldsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEnrFields", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEnrFields indicates an expected call of UpdateEnrFields.
func (mr *MockStoreMockRecorder) UpdateEnrFields(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEnrFields", reflect.TypeOf((*MockStore)(nil).UpdateEnrFields), ctx, arg)
}

// UpdateRlpRecord mocks base method.
func (m *MockStore) UpdateRlpRecord(ctx context.Context, arg db.UpdateRlpRecordParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRlpRecord", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRlpRecord indicates an expected call of UpdateRlpRecord.
func (mr *MockStoreMockRecorder) UpdateRlpRecord(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRlpRecord", reflect.TypeOf((*MockStore)(nil).UpdateRlpRecord), ctx, arg)
}
