// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: enr_records.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const createEnrRecord = `-- name: CreateEnrRecord :one
INSERT INTO "enr_records" (
  "id", "fields"
) VALUES (
  $1, $2
) RETURNING id, fields, added_at, edited_at
`

type CreateEnrRecordParams struct {
	ID     string
	Fields []string
}

func (q *Queries) CreateEnrRecord(ctx context.Context, arg CreateEnrRecordParams) (EnrRecord, error) {
	row := q.db.QueryRowContext(ctx, createEnrRecord, arg.ID, pq.Array(arg.Fields))
	var i EnrRecord
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Fields),
		&i.AddedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteEnrRecord = `-- name: DeleteEnrRecord :exec
DELETE FROM "enr_records"
WHERE "id" = $1
`

func (q *Queries) DeleteEnrRecord(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteEnrRecord, id)
	return err
}

const getEnrRecord = `-- name: GetEnrRecord :one
SELECT id, fields, added_at, edited_at FROM "enr_records"
WHERE "id" = $1
`

func (q *Queries) GetEnrRecord(ctx context.Context, id string) (EnrRecord, error) {
	row := q.db.QueryRowContext(ctx, getEnrRecord, id)
	var i EnrRecord
	err := row.Scan(
		&i.ID,
		pq.Array(&i.Fields),
		&i.AddedAt,
		&i.EditedAt,
	)
	return i, err
}

const markEnrSeen = `-- name: MarkEnrSeen :exec
UPDATE "enr_records" 
SET "edited_at" = $1
WHERE "id" = $2
`

type MarkEnrSeenParams struct {
	EditedAt time.Time
	ID       string
}

func (q *Queries) MarkEnrSeen(ctx context.Context, arg MarkEnrSeenParams) error {
	_, err := q.db.ExecContext(ctx, markEnrSeen, arg.EditedAt, arg.ID)
	return err
}

const updateEnrFields = `-- name: UpdateEnrFields :exec
UPDATE "enr_records" 
SET 
  "fields" = $1,
  "edited_at" = now()
WHERE "id" = $2
`

type UpdateEnrFieldsParams struct {
	Fields []string
	ID     string
}

func (q *Queries) UpdateEnrFields(ctx context.Context, arg UpdateEnrFieldsParams) error {
	_, err := q.db.ExecContext(ctx, updateEnrFields, pq.Array(arg.Fields), arg.ID)
	return err
}
