// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: rlp_records.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createRlpRecord = `-- name: CreateRlpRecord :one
INSERT INTO "rlp_records" (
  "id", "raw_name", "protocol_version", "caps"
) VALUES (
  $1, $2, $3, $4
) RETURNING id, raw_name, protocol_version, caps, added_at, edited_at
`

type CreateRlpRecordParams struct {
	ID              string
	RawName         string
	ProtocolVersion int32
	Caps            []string
}

func (q *Queries) CreateRlpRecord(ctx context.Context, arg CreateRlpRecordParams) (RlpRecord, error) {
	row := q.db.QueryRowContext(ctx, createRlpRecord,
		arg.ID,
		arg.RawName,
		arg.ProtocolVersion,
		pq.Array(arg.Caps),
	)
	var i RlpRecord
	err := row.Scan(
		&i.ID,
		&i.RawName,
		&i.ProtocolVersion,
		pq.Array(&i.Caps),
		&i.AddedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteRlpRecord = `-- name: DeleteRlpRecord :exec
DELETE FROM "rlp_records"
WHERE "id" = $1
`

func (q *Queries) DeleteRlpRecord(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteRlpRecord, id)
	return err
}

const getRlpRecord = `-- name: GetRlpRecord :one
SELECT id, raw_name, protocol_version, caps, added_at, edited_at FROM "rlp_records"
WHERE "id" = $1
`

func (q *Queries) GetRlpRecord(ctx context.Context, id string) (RlpRecord, error) {
	row := q.db.QueryRowContext(ctx, getRlpRecord, id)
	var i RlpRecord
	err := row.Scan(
		&i.ID,
		&i.RawName,
		&i.ProtocolVersion,
		pq.Array(&i.Caps),
		&i.AddedAt,
		&i.EditedAt,
	)
	return i, err
}

const updateRlpRecord = `-- name: UpdateRlpRecord :exec
UPDATE "rlp_records"
SET 
 raw_name = coalesce($1, raw_name),
 protocol_version = coalesce($2, protocol_version),
 caps = coalesce($3, caps),
 edited_at = now()
WHERE id = $4
`

type UpdateRlpRecordParams struct {
	RawName         sql.NullString
	ProtocolVersion sql.NullInt32
	Caps            []string
	ID              string
}

func (q *Queries) UpdateRlpRecord(ctx context.Context, arg UpdateRlpRecordParams) error {
	_, err := q.db.ExecContext(ctx, updateRlpRecord,
		arg.RawName,
		arg.ProtocolVersion,
		pq.Array(arg.Caps),
		arg.ID,
	)
	return err
}
