// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: scan_records.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const createScanRecord = `-- name: CreateScanRecord :one
INSERT INTO "scan_records" (
  "node", "ip", "ports"
) VALUES (
  $1, $2, $3
) RETURNING id, node, ip, ports, scanned_at, edited_at
`

type CreateScanRecordParams struct {
	Node  string
	Ip    string
	Ports []int32
}

func (q *Queries) CreateScanRecord(ctx context.Context, arg CreateScanRecordParams) (ScanRecord, error) {
	row := q.db.QueryRowContext(ctx, createScanRecord, arg.Node, arg.Ip, pq.Array(arg.Ports))
	var i ScanRecord
	err := row.Scan(
		&i.ID,
		&i.Node,
		&i.Ip,
		pq.Array(&i.Ports),
		&i.ScannedAt,
		&i.EditedAt,
	)
	return i, err
}

const deleteNodeScanRecords = `-- name: DeleteNodeScanRecords :exec
DELETE FROM "scan_records"
WHERE "node" = $1
`

func (q *Queries) DeleteNodeScanRecords(ctx context.Context, node string) error {
	_, err := q.db.ExecContext(ctx, deleteNodeScanRecords, node)
	return err
}

const deleteScanRecord = `-- name: DeleteScanRecord :exec
DELETE FROM "scan_records"
WHERE "id" = $1
`

func (q *Queries) DeleteScanRecord(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScanRecord, id)
	return err
}

const getNodeScanRecords = `-- name: GetNodeScanRecords :one
SELECT id, node, ip, ports, scanned_at, edited_at FROM "scan_records"
WHERE "node" = $1
`

func (q *Queries) GetNodeScanRecords(ctx context.Context, node string) (ScanRecord, error) {
	row := q.db.QueryRowContext(ctx, getNodeScanRecords, node)
	var i ScanRecord
	err := row.Scan(
		&i.ID,
		&i.Node,
		&i.Ip,
		pq.Array(&i.Ports),
		&i.ScannedAt,
		&i.EditedAt,
	)
	return i, err
}
