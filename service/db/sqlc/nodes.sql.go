// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: nodes.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const addQueries = `-- name: AddQueries :one
UPDATE "nodes" 
SET "queries" = "queries" + $1
WHERE "id" = $2
RETURNING id, added_at, seen_at, queries, ips
`

type AddQueriesParams struct {
	Queries int32
	ID      string
}

func (q *Queries) AddQueries(ctx context.Context, arg AddQueriesParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, addQueries, arg.Queries, arg.ID)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.AddedAt,
		&i.SeenAt,
		&i.Queries,
		pq.Array(&i.Ips),
	)
	return i, err
}

const createNode = `-- name: CreateNode :one
INSERT INTO "nodes" (
  "id"
) VALUES (
  $1
)
RETURNING id, added_at, seen_at, queries, ips
`

func (q *Queries) CreateNode(ctx context.Context, id string) (Node, error) {
	row := q.db.QueryRowContext(ctx, createNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.AddedAt,
		&i.SeenAt,
		&i.Queries,
		pq.Array(&i.Ips),
	)
	return i, err
}

const deleteNode = `-- name: DeleteNode :exec
DELETE FROM "nodes"
WHERE "id" = $1
`

func (q *Queries) DeleteNode(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteNode, id)
	return err
}

const getNode = `-- name: GetNode :one
SELECT id, added_at, seen_at, queries, ips FROM "nodes"
WHERE "id" = $1
`

func (q *Queries) GetNode(ctx context.Context, id string) (Node, error) {
	row := q.db.QueryRowContext(ctx, getNode, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.AddedAt,
		&i.SeenAt,
		&i.Queries,
		pq.Array(&i.Ips),
	)
	return i, err
}

const incrementQuery = `-- name: IncrementQuery :one
UPDATE "nodes" 
SET "queries" = "queries" + 1
WHERE "id" = $1
RETURNING id, added_at, seen_at, queries, ips
`

func (q *Queries) IncrementQuery(ctx context.Context, id string) (Node, error) {
	row := q.db.QueryRowContext(ctx, incrementQuery, id)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.AddedAt,
		&i.SeenAt,
		&i.Queries,
		pq.Array(&i.Ips),
	)
	return i, err
}

const listNodesByActivity = `-- name: ListNodesByActivity :many
SELECT id, added_at, seen_at, queries, ips FROM "nodes"
ORDER BY "seen_at"
LIMIT $1
OFFSET $2
`

type ListNodesByActivityParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListNodesByActivity(ctx context.Context, arg ListNodesByActivityParams) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodesByActivity, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.AddedAt,
			&i.SeenAt,
			&i.Queries,
			pq.Array(&i.Ips),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNodesByCreation = `-- name: ListNodesByCreation :many
SELECT id, added_at, seen_at, queries, ips FROM "nodes"
ORDER BY "added_at"
LIMIT $1
OFFSET $2
`

type ListNodesByCreationParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListNodesByCreation(ctx context.Context, arg ListNodesByCreationParams) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, listNodesByCreation, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.AddedAt,
			&i.SeenAt,
			&i.Queries,
			pq.Array(&i.Ips),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
